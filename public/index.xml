<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://blog.altxtech.net/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Aug 2023 11:38:16 -0300</lastBuildDate><atom:link href="https://blog.altxtech.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>First Post</title>
      <link>https://blog.altxtech.net/posts/first-post/</link>
      <pubDate>Sun, 13 Aug 2023 11:38:16 -0300</pubDate>
      
      <guid>https://blog.altxtech.net/posts/first-post/</guid>
      <description>First post.
Cool stuff coming soon&amp;hellip;</description>
    </item>
    
    <item>
      <title>Developing API data extraction jobs with Go</title>
      <link>https://blog.altxtech.net/posts/how_to_develop_an_api_extraction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.altxtech.net/posts/how_to_develop_an_api_extraction/</guid>
      <description>Intro In this post I will explain the very minimum necessary to build a production-ready script to extract data from an API with Go.
This is meant to be an as simple as possible solution that is still pretty resilient and reliable. This guide is ideal if you need to build something quickly and save on engineering hours. Possibly a job that will be run only once.
We&amp;rsquo;re going to handle API rate limiting, implement a very simple state management system and add some logs for auditing and debugging.</description>
    </item>
    
  </channel>
</rss>
